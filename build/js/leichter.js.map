{"version":3,"sources":["webpack:///webpack/bootstrap b369db95c3bab597a8b0","webpack:///./lib/leichter.js","webpack:///./lib/helpers/append_node.js","webpack:///./lib/ignition/ignite_python_code.js","webpack:///./lib/ignition/lexer/lex_python.js","webpack:///./lib/ignition/keywords/python.js","webpack:///./lib/ignition/parser/parse_python.js","webpack:///./lib/ignition/ignite_ruby_code.js","webpack:///./lib/ignition/lexer/lex_ruby.js","webpack:///./lib/ignition/parser/parse_ruby.js","webpack:///./lib/ignition/char_mapping/python.js"],"names":["appendNode","require","ignitePythonCode","igniteRubyCode","module","exports","options","lang","element","enableEscapedCharacter","document","getElementById","codeString","innerText","console","warn","ignite","params","child","createElement","name","className","classList","join","id","attributes","key","setAttribute","appendChild","children","grandChildInfo","lexPython","parsePython","lexedTokens","tokens","token","codeSegment","type","value","stringElements","getElementsByClassName","e","string","result","char","i","l","length","innerHTML","K","M","$charMap","String","prototype","last","Array","includes","item","indexOf","code","currentChar","peekChar","charPosition","lexedValue","readChar","readString","lexedString","stringClosing","push","readSpace","spaces","readComment","commentString","undefined","tokenizeLexedValue","Object","keys","slice","set","has","get","log","$keyword","$function","$logical","$boolean","$nullity","tokenPosition","currentToken","peekToken","nextToken","parseArray","isNaN","parseArgumentTokens","lexRuby","parseRuby","$keywords","$functions","peekTokenIs","tokenizeArguments","tokenizeClassScope","isGlobalVariable","Map"],"mappings":"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","file":"leichter.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b369db95c3bab597a8b0","const appendNode = require('./helpers/append_node.js').appendNode\nconst ignitePythonCode = require('./ignition/ignite_python_code.js').ignitePythonCode\nconst igniteRubyCode = require('./ignition/ignite_ruby_code.js').igniteRubyCode\n\nmodule.exports = class Leichter {\n  constructor(options = {}) {\n    const { lang, element, enableEscapedCharacter } = options\n    this.lang = lang\n    this.enableEscapedCharacter = enableEscapedCharacter\n    this.element = document.getElementById(element)\n  }\n\n  /* Using instance object to ignite the syntax highlighting */\n  ignite() {\n    const codeString = this.element.innerText\n\n    switch(this.lang) {\n      case 'python': ignitePythonCode(\n          this.element,\n          this.enableEscapedCharacter\n        );\n        break;\n\n      case 'ruby':   igniteRubyCode(this.element);   break;\n      default: console.warn(`${this.lang} lang currently is unsupported!`)\n    }\n  }\n\n  /* Alias method if ignite which is the verb 'ignite' in German */\n  entzünden() { this.ignite() }\n\n  /* Directly ignite the syntax highlighting using class method */\n  static ignite(options = {}) {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/leichter.js","export function appendNode(element, params) {\n  /* Create child element */\n  const child = document.createElement(params.name)\n  child.className = params.classList.join(' ')\n  child.id = params.id\n\n  if (params.attributes) {\n    for (let key in params.attributes) {\n      child.setAttribute(key, params.attributes[key])\n    }  \n  }\n  \n  element.appendChild(child)\n\n  /* Append to grand child element */\n  if (params.children) {\n    for (let grandChildInfo of params.children) {\n      appendNode(child, grandChildInfo)\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/helpers/append_node.js","const lexPython = require('./lexer/lex_python.js').lexPython\nconst parsePython = require('./parser/parse_python.js').parsePython\nconst className = 'lt'\n\nexport function ignitePythonCode(element, enableEscapedCharacter = false) {\n  let codeString = element.innerText\n\n  /* Parse the code for the first time into fundamental tokens */\n  let lexedTokens = lexPython(codeString)\n\n  /* Secondary parse for complex combination syntax feature */\n  const tokens = parsePython(lexedTokens)\n\n  /* Parsing Python code highlighting */\n  element.innerText = ''\n  for (let token of tokens) {\n    let codeSegment = document.createElement('span')\n    codeSegment.className = `${className} ${className}-${token.type}`\n    codeSegment.innerText = token.value\n    element.appendChild(codeSegment)\n  }\n\n  /* Dynamically Parse Escaped Character Style */\n  if (enableEscapedCharacter) {\n    const stringElements = element.getElementsByClassName('lt-string')\n    for (let e of stringElements) {\n      let string = e.innerText, result = '', value = '', char\n      for (let i = 0, l = string.length; i < l; i++) {\n        let char = string[i]\n        if (char === '\\\\') {\n          if (value) {\n            result += value\n            value = ''\n          }\n          result += `<span class=\"lt lt-escaped-character\">${char + string[++i]}</span>`\n        } else value += char\n      }\n      if (value) result += value\n      e.innerHTML = result\n    }  \n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/ignition/ignite_python_code.js","const K = require('../keywords/python')\nconst M = require('../char_mapping/python').$charMap\n\nString.prototype.last = function() {\n  return this[this.length - 1]\n}\nArray.prototype.includes = function(item) {\n  return this.indexOf(item) !== -1\n}\n\nexport function lexPython(code) {\n  let currentChar = code[0]\n  let peekChar = code[1]\n  let charPosition = 0\n  let lexedValue = ''\n  let tokens = []\n\n  function readChar() {\n    charPosition++\n    currentChar = code[charPosition]\n    peekChar = code[charPosition + 1]\n  }\n\n  function readString() {\n    let lexedString = currentChar\n    readChar()\n\n    if (currentChar === lexedString[0] && peekChar === lexedString) {\n      /* Multi-line String Case */\n      lexedString += currentChar\n      readChar()\n      lexedString += currentChar\n      readChar()\n\n      let stringClosing = [lexedString[0], lexedString[0], lexedString[0]].join('')\n\n      while(currentChar && currentChar + peekChar + code[charPosition + 2] != stringClosing) {\n\n        /* Escaped Character Case */\n        if (currentChar === '\\\\') {\n          lexedString += currentChar\n          readChar()\n        }\n\n        lexedString += currentChar\n        readChar()\n      }\n\n      for(let i = 0; i < 3; i++) {\n        if (currentChar) {\n          lexedString += currentChar\n        } else break\n        readChar()\n      }\n    } else {\n      /* Single Line String Case */\n      while (currentChar != lexedString[0] && currentChar !== '\\n') {\n\n        /* Escaped Character Case */\n        if (currentChar === '\\\\') {\n          lexedString += currentChar\n          readChar()\n        }\n\n        lexedString += currentChar\n        readChar()\n      }\n\n      if (currentChar !== '\\n') {\n        /* Current charcacter is the closing string */\n        lexedString += currentChar\n        readChar()\n      }\n    }\n\n    /* Push String Token */\n    tokens.push({ type: 'string', value: lexedString })\n  }\n\n  function readSpace() {\n    let spaces = currentChar\n    readChar()\n\n    while (currentChar == ' ') {\n      spaces += ' '\n      readChar()\n    }\n\n    tokens.push({ type: 'space', value: spaces })\n  }\n\n  function readComment() {\n    let commentString = currentChar\n    readChar()\n\n    while (currentChar !== undefined && currentChar != '\\n') {\n      commentString += currentChar\n      readChar()\n    }\n\n    tokens.push({ type: 'comment', value: commentString })\n  }\n\n  function tokenizeLexedValue() {\n    if (lexedValue) {\n      for (let type of Object.keys(K)) {\n        if (K[type].includes(lexedValue)) {\n          tokens.push({ type: type.slice(1), value: lexedValue })\n          lexedValue = ''\n          break;\n        }\n      }\n\n      if (lexedValue) {\n        tokens.push({ type: 'default', value: lexedValue })\n        lexedValue = ''\n      }\n    }\n  }\n\n  /* Setting function as values in character mapping */\n  M.set(' ', readSpace)\n  M.set('\"', readString)\n  M.set('\\'', readString)\n  M.set('#', readComment)\n\n  /* Start Lexing */\n  while (currentChar !== undefined) {\n\n    /* Maps to special character and convert into tokens */\n    if (M.has(currentChar)) {\n      tokenizeLexedValue();\n\n      let value = M.get(currentChar)\n      if (typeof value === 'string') {\n        tokens.push({ type: value, value: currentChar })\n        readChar()\n      } else if (typeof value === 'function') {\n        /* Call function for specific lexing method */\n        value()\n      } else {\n        console.log('Error')\n      }\n    }\n    /* Parse default identifier */\n    else {\n      lexedValue += currentChar\n      readChar()\n    }\n\n  }\n\n  if (lexedValue) tokenizeLexedValue()\n\n  return tokens\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/ignition/lexer/lex_python.js","export const $keyword = ['as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'lambda', 'nonlocal', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\nexport const $function = ['abs', 'dict', 'help', 'min', 'setattr', 'all', 'dir', 'hex', 'next', 'slice', 'any', 'divmod', 'id', 'object', 'sorted', 'ascii', 'enumerate', 'input', 'oct', 'staticmethod', 'bin', 'eval', 'int', 'open', 'str', 'bool', 'exec', 'isinstance', 'ord', 'sum', 'bytearray', 'filter', 'issubclass', 'pow', 'super', 'bytes', 'float', 'iter', 'print', 'tuple', 'callable', 'format', 'len', 'property', 'type', 'chr', 'frozenset', 'list', 'range', 'vars', 'classmethod', 'getattr', 'locals', 'repr', 'zip', 'compile', 'globals', 'map', 'reversed', '_import_', 'complex', 'hasattr', 'max', 'round', 'delattr', 'hash', 'memoryview', 'set']\nexport const $logical = ['and', 'or', 'not', 'in', 'is']\nexport const $boolean = ['False', 'True']\nexport const $nullity = ['None']\n\n\n\n// WEBPACK FOOTER //\n// ./lib/ignition/keywords/python.js","/*\n * Python Parser\n * \n * Basically parser is for the parsing complex token combinations or types\n */\n\nexport function parsePython(tokens) {\n  let tokenPosition = 0\n  let currentToken = tokens[0]\n  let peekToken = tokens[1]\n\n  function nextToken() {\n    tokenPosition++\n    currentToken = tokens[tokenPosition]\n    peekToken = tokens[tokenPosition + 1]\n  }\n\n  function parseArray() {\n    while(currentToken && currentToken.type != 'right-bracket') {\n      if (currentToken.type === 'default' && !isNaN(currentToken.value)) {\n        currentToken.type = 'number'\n      }\n      nextToken()\n    }\n  }\n\n  function parseArgumentTokens() {\n    while (currentToken && !(currentToken.type === 'right-parentheses' && peekToken.type === 'colon')) {\n      if (currentToken.type === 'default') {\n        currentToken.type = 'argument'\n      } else if (currentToken.type === 'operator' && currentToken.value === '=') {\n        /* Argument with Default Value */\n        while (currentToken && currentToken.type !== 'comma') {\n          if (currentToken.type === 'default' && !isNaN(currentToken.value)) {\n            currentToken.type = 'number'\n          } else if (currentToken.type === 'left-bracket') {\n            parseArray()\n          }\n          nextToken()\n        }\n      }\n      nextToken()\n    }\n  }\n\n  while (currentToken) {\n    switch(currentToken.type) {\n      case 'keyword':\n        if (currentToken.value === 'def' && peekToken && peekToken.type === 'space') {\n          nextToken()\n          if (peekToken && peekToken.type === 'default') {\n            peekToken.type = 'function-name'\n          }\n        } else if (currentToken.value === 'class' && peekToken && peekToken.type === 'space') {\n          nextToken()\n          if (peekToken && peekToken.type === 'default') {\n            peekToken.type = 'class-name'\n          }\n        }\n        nextToken()\n        break;\n\n      case 'function-name':\n      case 'class-name':\n        if (peekToken && peekToken.type === 'left-parentheses') {\n          parseArgumentTokens()\n        }\n        break\n\n      case 'default':\n        if (!isNaN(currentToken.value)) {\n          currentToken.type = 'number'\n        }\n        nextToken()\n        break;\n\n      default:\n        nextToken()\n    }\n  }\n\n  return tokens\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/ignition/parser/parse_python.js","const lexRuby = require('./lexer/lex_ruby.js').lexRuby\nconst parseRuby = require('./parser/parse_ruby.js').parseRuby\nconst className = 'lt'\n\nexport function igniteRubyCode(element) {\n  let codeString = element.innerText\n\n  /* Parse the code for the first time into fundamental tokens */\n  let lexedTokens = lexRuby(codeString)\n\n  /* Secondary parse for complex combination syntax feature */\n  const tokens = parseRuby(lexedTokens)\n\n  /* Parsing Ruby code highlighting */\n  element.innerText = ''\n  for (let token of tokens) {\n    let codeSegment = document.createElement('span')\n    codeSegment.className = `${className} ${className}-${token.type}`\n    codeSegment.innerText = token.value\n    element.appendChild(codeSegment)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/ignition/ignite_ruby_code.js","const $keywords = ['alias ', 'and', 'BEGIN', 'begin', 'break', 'case', 'class', 'def', 'defined?', 'do', 'else', 'elsif', 'END', 'end', 'ensure', 'false', 'for', 'if', 'in', 'module', 'next', 'nil', 'not', 'or', 'redo', 'rescue', 'retry', 'return', 'self', 'super', 'then', 'true', 'undef', 'unless', 'until', 'when', 'while', 'yield']\nconst $functions = ['include', 'using', 'public', 'private', 'define_method', 'irb_exit_org',  'default_src_encoding', 'irb_binding', 'sprintf', 'format',  'catch', 'throw', 'loop', 'block_given?', 'trace_var', 'untrace_var', 'at_exit', 'set_trace_func', 'caller', 'caller_locations', 'select', 'test', 'fork', '`', 'sleep', 'gem_original_require', 'respond_to_missing?', 'load', 'exec', 'exit!', 'system', 'spawn', 'abort', 'syscall', 'printf', 'open', 'putc', 'print', 'readline', 'puts', 'p', 'readlines', 'rand', 'gets', 'srand', 'proc', 'lambda', 'gem', 'initialize_copy', 'initialize_clone', 'initialize_dup', 'trap', 'require', 'require_relative', 'autoload', 'autoload?', 'binding', 'local_variables', 'warn', 'raise', 'fail', 'global_variables', '__method__', '__callee__', '__dir__', 'eval', 'iterator?', 'method_missing', 'singleton_method_added', 'singleton_method_removed', 'singleton_method_undefined', 'initialize']\n\nString.prototype.last = function() {\n  return this[this.length - 1]\n}\nArray.prototype.includes = function(item) {\n  return this.indexOf(item) !== -1\n}\n\nexport function lexRuby(code) {\n  let currentChar = code[0]\n  let peekChar = code[1]\n  let charPosition = 0\n  let lexedValue = ''\n  let tokens = []\n\n  function readChar() {\n    charPosition++\n    currentChar = code[charPosition]\n    peekChar = code[charPosition + 1]\n  }\n\n  function readString() {\n    let lexedString = currentChar\n    readChar()\n\n    /* Single Line String Case */\n    while (currentChar != lexedString[0] && currentChar !== '\\n') {\n      lexedString += currentChar\n      readChar()\n    }\n\n    if (currentChar !== '\\n') {\n      /* Current charcacter is the closing string */\n      lexedString += currentChar\n      readChar()\n    }\n\n    /* Push String Token */\n    tokens.push({ type: 'string', value: lexedString })\n  }\n\n  function readSpace() {\n    let spaces = currentChar\n    readChar()\n\n    while (currentChar == ' ') {\n      spaces += ' '\n      readChar()\n    }\n\n    tokens.push({ type: 'space', value: spaces })\n  }\n\n  function readComment() {\n    let commentString = currentChar\n    readChar()\n\n    while (currentChar !== undefined && currentChar != '\\n') {\n      commentString += currentChar\n      readChar()\n    }\n\n    tokens.push({ type: 'comment', value: commentString })\n  }\n\n  function tokenizeLexedValue() {\n    if (lexedValue) {\n      if ($keywords.includes(lexedValue)) {\n        tokens.push({ type: 'keyword', value: lexedValue })\n      } else if ($functions.includes(lexedValue)) {\n        tokens.push({ type: 'function', value: lexedValue })\n      } else {\n        tokens.push({ type: 'default', value: lexedValue })\n      }\n      lexedValue = ''\n    }\n  }\n\n  while (currentChar !== undefined) {\n    switch(currentChar) {\n      case ' ':\n        tokenizeLexedValue()\n        readSpace()\n        break;\n\n      case '\"':\n      case '\\'':\n        tokenizeLexedValue()\n        readString()\n        break;\n\n      case '=':\n      case '+':\n      case '-':\n      case '*':\n      case '/':\n      case '>':\n      case '<':\n      case '|':\n      case '&':\n        tokenizeLexedValue()\n        tokens.push({ type: 'operator', value: currentChar })\n        readChar()\n        break;\n\n      case ':':\n        tokenizeLexedValue()\n        tokens.push({ type: 'colon', value: ':' })\n        readChar()\n        break\n\n      case '[':\n        tokenizeLexedValue()\n        tokens.push({ type: 'left-bracket', value: '[' })\n        readChar()\n        break\n\n      case ']':\n        tokenizeLexedValue()\n        tokens.push({ type: 'right-bracket', value: ']' })\n        readChar()\n        break\n\n      case '(':\n        tokenizeLexedValue()\n        tokens.push({ type: 'left-parentheses', value: '(' })\n        readChar()\n        break\n\n      case ')':\n        tokenizeLexedValue()\n        tokens.push({ type: 'right-parentheses', value: ')' })\n        readChar()\n        break\n\n      case '{':\n        tokenizeLexedValue()\n        tokens.push({ type: 'left-brace', value: '{' })\n        readChar()\n        break\n  \n      case '}':\n        tokenizeLexedValue()\n        tokens.push({ type: 'right-brace', value: '}' })\n        readChar()\n        break\n\n      case ',':\n        tokenizeLexedValue()\n        tokens.push({ type: 'comma', value: ',' })\n        readChar()\n        break\n\n      case ';':\n        tokenizeLexedValue()\n        tokens.push({ type: 'semicolon', value: ':' })\n        readChar()\n        break\n\n      case '\\n':\n        tokenizeLexedValue()\n        tokens.push({ type: 'newline', value: '\\n' })\n        readChar()\n        break\n\n      case '#':\n        tokenizeLexedValue()\n        readComment()\n        break\n\n      default:\n        lexedValue += currentChar\n        readChar()\n    }\n  }\n\n  if (lexedValue) tokenizeLexedValue()\n\n  return tokens\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/ignition/lexer/lex_ruby.js","/*\n * Ruby Parser\n * \n * Basically parser is for the parsing complex token combinations or types\n */\n\nexport function parseRuby(tokens) {\n  let tokenPosition = 0\n  let currentToken = tokens[0]\n  let peekToken = tokens[1]\n\n  function nextToken() {\n    tokenPosition++\n    currentToken = tokens[tokenPosition]\n    peekToken = tokens[tokenPosition + 1]\n    return currentToken\n  }\n\n  function peekTokenIs(type) {\n    return peekToken && peekToken.type === type\n  }\n\n  function tokenizeArguments() {\n    while (currentToken && ['right-parentheses', 'newline', 'semicolon'].indexOf(currentToken.type) === -1) {\n      if (currentToken.type === 'default') {\n        currentToken.type = 'argument'\n      }\n      nextToken()\n    }\n  }\n\n  function tokenizeClassScope() {\n    nextToken() /* Current token type is space */\n    if (peekTokenIs('default')) {\n      peekToken.type = 'class-name'\n\n      /* Match the Inheritance Pattern */\n      if (\n        nextToken() && peekTokenIs('space')    &&\n        nextToken() && peekTokenIs('operator') && peekToken.value === '<' &&\n        nextToken() && peekTokenIs('space')    &&\n        nextToken() && peekTokenIs('default')\n      ) {\n        peekToken.type = 'inherited-class'\n      }\n    }\n  }\n\n  function isGlobalVariable() {\n    return currentToken.value[0] === '$'\n  }\n\n  while (currentToken) {\n    switch(currentToken.type) {\n      case 'keyword':\n        if (currentToken.value === 'def' && peekTokenIs('space')) {\n          if (nextToken() && peekTokenIs('default')) {\n            peekToken.type = 'function-name'\n          }\n        } else if (currentToken.value === 'class' && peekTokenIs('space')) {\n          tokenizeClassScope()\n        }\n        nextToken()\n        break;\n\n      case 'function-name':\n        tokenizeArguments()\n        break\n\n      case 'default':\n        if (!isNaN(currentToken.value)) {\n          currentToken.type = 'number'\n        } else if (isGlobalVariable(currentToken)) {\n          currentToken.type = 'global-variable'\n        }\n        nextToken()\n        break;\n\n      default:\n        nextToken()\n    }\n  }\n\n  return tokens\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/ignition/parser/parse_ruby.js","export const $charMap = new Map([\n  /* Implemented a readSpace function in python lexing */\n  [' ', 'READ_SPACE_FUNC'],\n\n  /* Implemented a readString function in python lexing */\n  ['\"', 'READ_STRING_FUNC'],\n  ['\\'', 'READ_STRING_FUNC'],\n\n  ['=', 'operator'],\n  ['+', 'operator'],\n  ['-', 'operator'],\n  ['*', 'operator'],\n  ['/', 'operator'],\n  ['%', 'operator'],\n  ['>', 'operator'],\n  ['<', 'operator'],\n  ['|', 'operator'],\n  ['&', 'operator'],\n  [':', 'colon'],\n  ['[', 'left-bracket'],\n  [']', 'right-bracket'],\n  ['(', 'left-parentheses'],\n  [')', 'right-parentheses'],\n  ['{', 'left-brace'],\n  ['}', 'right-brace'],\n  [',', 'comma'],\n  [';', 'semicolon'],\n  ['\\n', 'newline'],\n\n  /* Implement a readComment function in python lexing */\n  ['#', 'READ_COMMENT_FUNC'],\n])\n\n\n// WEBPACK FOOTER //\n// ./lib/ignition/char_mapping/python.js"],"sourceRoot":""}